---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 5m
  chart:
    spec:
      # registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 35.0.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  valuesFrom:
    - kind: Secret
      name: slack-webhook
      valuesKey: URL
      targetPath: alertmanager.config.global.slack_api_url
  values:
    fullnameOverride: prometheus
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "slack"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}

                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "slack"
          routes:
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "slack"
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "rook-ceph-block"
              # storageClassName: "standard"
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      enabled: false
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          label: grafana-dashboard
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
          - action: drop
            regex: "(apiserver_request_duration_seconds_bucket|etcd_request_duration_seconds_bucket|rest_client_request_duration_seconds_bucket|apiserver_response_sizes_bucket)"
            sourceLabels:
              - __name__
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: keep
            regex: "(workqueue_adds_total|workqueue_depth|workqueue_queue_duration_seconds_bucket|process_resident_memory_bytes|process_cpu_seconds_total|go_goroutines)" #apiserver_request_duration_seconds_count|apiserver_request_duration_seconds_bucket)"
            sourceLabels:
              - __name__
    kubeControllerManager:
      enabled: false
      endpoints: []
      service:
        port: 10252
        targetPort: 10252
      serviceMonitor:
        metricRelabelings:
          - action: keep
            regex: "no_such_name"
            sourceLabels:
              - __name__
    kubeScheduler:
      enabled: false
      endpoints: []
      service:
        port: 10251
        targetPort: 10251
      serviceMonitor:
        metricRelabelings:
          - action: keep
            regex: "no_such_name"
            sourceLabels:
              - __name__
    kubeProxy:
      enabled: false
      endpoints: []
      serviceMonitor:
        metricRelabelings:
          - action: keep
            regex: "no_such_name"
            sourceLabels:
              - __name__
    kubeEtcd:
      enabled: false
      endpoints: []
      service:
        enabled: true
        port: 2381
        targetPort: 2381
      serviceMonitor:
        metricRelabelings:
          - action: keep
            regex: "no_such_name"
            sourceLabels:
              - __name__
    # Setting this option to 0 disabled CPU limits
    # prometheusOperator:
    #   configReloaderCpu: 0
    prometheus:
      prometheusSpec:
        scrapeInterval: 90s
        replicas: 1
        replicaExternalLabelName: "replica"
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 7d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "rook-ceph-block"
              # storageClassName: "standard"
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            memory: 200Mi
