- name: Disable swap
  import_tasks: swap.yml

- name: test
  debug:
    msg: test
  changed_when: true
  notify: restart k3s

- name: Download executable
  become: true
  get_url:
    url: "{{ k3s_url }}"
    dest: /usr/local/bin/k3s
    mode: 0755
    owner: root
    group: root
    checksum: "{{ k3s_hash }}"
  notify: restart k3s

- name: Allow nodes in firewall
  import_tasks: firewall.yml

- name: Init cluster
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  block:
    - name: Copy K3s service file
      notify: restart k3s
      become: true
      template:
        src: "first-master-k3s.service.j2"
        dest: "/etc/systemd/system/k3s.service"
        owner: root
        group: root
        mode: 0644

    - name: Enable and check K3s service
      become: true
      systemd:
        name: k3s
        daemon_reload: true
        enabled: true

    - name: Ensure K3s service is started
      become: true
      service:
        name: k3s
        state: started
      register: start_k3s

    - name: Wait for node-token
      become: true
      wait_for:
        path: /var/lib/rancher/k3s/server/node-token

    - name: Read node-token from master
      become: true
      slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: node_token

    - name: Store Master node-token
      set_fact:
        token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Join masters to cluster
  when:
    - inventory_hostname in groups['kube-master']
    - inventory_hostname != groups['kube-master'][0]
  block:
    - name: Copy K3s service file
      notify: restart k3s
      become: true
      template:
        src: "other-masters-k3s.service.j2"
        dest: "/etc/systemd/system/k3s.service"
        owner: root
        group: root
        mode: 0644

    - name: Enable and check K3s service
      become: true
      systemd:
        name: k3s
        daemon_reload: true
        enabled: true

    - name: Ensure K3s service is started
      become: true
      throttle: 1
      service:
        name: k3s
        state: started
      register: start_k3s

- name: Check if SOPS key exists
  run_once: true
  delegate_to: 127.0.0.1
  stat:
    path: "{{ playbook_dir }}/{{ cluster_name }}.key"
  register: stat_result

- name: Create ns for flux
  become: true
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  command: k3s kubectl create ns flux-system
  register: result
  failed_when:
    - "not 'already exists' in result.stderr"
    - "not 'namespace/flux-system created' in result.stdout"
  changed_when: "'namespace/flux-system created' in result.stdout"
  when: stat_result.stat.exists

- name: Copy SOPS key
  become: true
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  copy:
    src: "{{ playbook_dir }}/{{ cluster_name }}.key"
    dest: "/tmp/sops.asc"
    owner: root
    group: root
    mode: "0600"
  when: stat_result.stat.exists

- name: Create SOPS secret
  become: true
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  command: "k3s kubectl create secret generic sops-gpg --namespace=flux-system --from-file=/tmp/sops.asc"
  register: result
  failed_when:
    - "not 'already exists' in result.stderr"
    - "not 'secret/sops-gpg created' in result.stdout"
  changed_when: "'secret/sops-gpg created' in result.stdout"
  when: stat_result.stat.exists

- name: Join agents to cluster
  when:
    - inventory_hostname in groups['kube-node']
  block:
    - name: Copy K3s service file
      notify: restart k3s
      become: true
      template:
        src: "agents-k3s.service.j2"
        dest: "/etc/systemd/system/k3s.service"
        owner: root
        group: root
        mode: 0644

    - name: You might want to initialize flux now.
      pause:

    - name: Enable and check K3s service
      become: true
      systemd:
        name: k3s
        daemon_reload: true
        enabled: true

    - name: Ensure K3s service is started
      become: true
      throttle: 1
      service:
        name: k3s
        state: started
      register: start_k3s
